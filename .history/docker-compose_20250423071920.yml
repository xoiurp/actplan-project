version: '3.8'

services:
  # Frontend existente
  frontend:
    build: ./project # Assumes Dockerfile is in ./project
    ports:
      - "80:80" # Maps host port 80 to container port 80 (Nginx default)
    depends_on:
      - pdf-processor
    # Add volume if nginx.conf needs to be mounted or other static files
    # volumes:
    #   - ./project/nginx.conf:/etc/nginx/conf.d/default.conf # Example

  # Serviço de processamento PDF com Docling
  pdf-processor:
    build:
      context: . # Use the root directory as context
      dockerfile: ./pdf-processor/Dockerfile # Specify Dockerfile location relative to context
    ports:
      - "8000:8000" # Maps host port 8000 to container port 8000 (FastAPI/Uvicorn default)
    volumes:
      - pdf-cache:/app/cache # Named volume for caching processed results
      - ./pdf-processor:/app # Mount the source code for development
    environment:
      - MAX_WORKERS=4 # Example environment variable
      - MEMORY_LIMIT=512M # Example environment variable
      - PYTHONUNBUFFERED=1 # Ensure Python output is not buffered
    deploy: # Resource limits (optional, good practice)
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Novo serviço de extração de PDF com tabula-py
  pdf-extractor-service:
    build:
      context: . # Use the root directory as context
      dockerfile: ./pdf-extractor-service/Dockerfile # Specify Dockerfile location relative to context
    ports:
      - "8001:8001" # Maps host port 8001 to container port 8001
    volumes:
      - ./pdf-extractor-service:/app # Mount the source code for development
    environment:
      - PYTHONUNBUFFERED=1 # Ensure Python output is not buffered
    # deploy: # Resource limits (optional, good practice)
    #   resources:
    #     limits:
    #       memory: 1G
    #     reservations:
    #       memory: 512M

volumes:
  pdf-cache: # Defines the named volume used by pdf-processor
